[{"content":"Biến và Kiểu Dữ Liệu Trong Java 1. Biến Trong Java Biến là một tên đại diện cho một vùng nhớ để lưu trữ dữ liệu. Trong Java, biến phải được khai báo với một kiểu dữ liệu cụ thể, xác định loại giá trị mà biến đó có thể lưu trữ.\nCú Pháp Khai Báo Biến \u003ckiểu_dữ_liệu\u003e \u003ctên_biến\u003e = \u003cgiá_trị\u003e; int age = 25; // Khai báo biến kiểu int double price = 19.99; // Khai báo biến kiểu double boolean isActive = true; // Khai báo biến kiểu boolean char grade = 'A'; // Khai báo biến kiểu char Quy Tắc Đặt Tên Biến Tên biến phải bắt đầu bằng một chữ cái, ký tự _ hoặc $. Không được sử dụng các từ khóa Java làm tên biến. Tên biến nên có ý nghĩa để tăng tính dễ hiểu. 2. Kiểu Dữ Liệu Trong Java Java cung cấp hai loại kiểu dữ liệu chính:\nKiểu dữ liệu cơ bản (Primitive Types): Là các kiểu dữ liệu được định nghĩa sẵn trong Java. Kiểu dữ liệu tham chiếu (Reference Types): Bao gồm các lớp, giao diện, mảng, và các đối tượng. Kiểu Dữ Liệu Cơ Bản (Primitive Types)\nSố nguyên: byte: Kích thước 1 byte (từ -128 đến 127). short: Kích thước 2 byte (từ -32,768 đến 32,767). int: Kích thước 4 byte (từ -2^31 đến 2^31-1). long: Kích thước 8 byte (từ -2^63 đến 2^63-1). byte b = 10; short s = 1000; int i = 100000; long l = 10000000000L; // Sử dụng 'L' để biểu thị kiểu long Số thực: float: Kích thước 4 byte, sử dụng cho các số thập phân nhỏ. double: Kích thước 8 byte, sử dụng cho các số thập phân lớn. float pi = 3.14f; // Sử dụng 'f' để biểu thị kiểu float double e = 2.71828; Ký tự: char: Kích thước 2 byte, lưu trữ một ký tự Unicode. char letter = 'A'; 4.Boolean:\nboolean: Chỉ có hai giá trị true hoặc false. boolean isJavaFun = true; ","description":"Khám phá các kiểu dữ liệu và cách khai báo biến trong Java.","tags":["java","biến","kiểu dữ liệu"],"title":"Biến và Kiểu Dữ Liệu Trong Java","uri":"/nguyenquangtrai03.github.io/post/2024/baiviet3/"},{"content":"Các Loại Vòng Lặp Trong Java Trong lập trình Java, vòng lặp được sử dụng để thực hiện một đoạn mã nhiều lần cho đến khi một điều kiện nhất định được đáp ứng. Java cung cấp ba loại vòng lặp cơ bản:\nfor loop while loop 1. Vòng Lặp for Mô Tả: Vòng lặp for được sử dụng khi bạn biết trước số lần lặp. Nó bao gồm ba phần:\nKhởi tạo: Giá trị ban đầu của biến lặp. Điều kiện: Xác định điều kiện để tiếp tục lặp. Cập nhật: Thay đổi giá trị biến lặp sau mỗi lần lặp. Cú Pháp: for (khởi_tạo; điều_kiện; cập_nhật) { // Mã thực thi } Ví Dụ: for (int i = 0; i \u003c 5; i++) { System.out.println(\"Lần lặp: \" + i); } Kết Quả: Lần lặp: 0 Lần lặp: 1 Lần lặp: 2 Lần lặp: 3 Lần lặp: 4 Vòng Lặp Lồng Nhau: for (int i = 1; i \u003c= 3; i++) { for (int j = 1; j \u003c= 3; j++) { System.out.println(\"i = \" + i + \", j = \" + j); } } 2. Vòng Lặp while Mô Tả: Vòng lặp while được sử dụng khi bạn không biết trước số lần lặp. Điều kiện được kiểm tra trước khi thực thi thân vòng lặp.\nCú Pháp:\nwhile (điều_kiện) { // Mã thực thi } Ví Dụ:\nint count = 0; while (count \u003c 5) { System.out.println(\"Đếm: \" + count); count++; } Kết Quả:\nĐếm: 0 Đếm: 1 Đếm: 2 Đếm: 3 Đếm: 4 Vòng Lặp Vô Hạn (Cẩn Thận):\nwhile (true) { System.out.println(\"Vòng lặp vô hạn\"); } ","description":"Tìm hiểu về các vòng lặp trong Java, bao gồm for, while và do-while.","tags":["java","vòng lặp"],"title":"Các Loại Vòng Lặp Trong Java","uri":"/nguyenquangtrai03.github.io/post/2024/baiviet4/"},{"content":"Cấu Trúc Cơ Bản Của Một Chương Trình Java Chương trình Java cơ bản bắt đầu từ phương thức chính main(). Đây là điểm khởi đầu mà JVM (Java Virtual Machine) sử dụng để thực thi chương trình. Mỗi chương trình Java phải có ít nhất một lớp, và lớp đó sẽ chứa phương thức main().\nCấu Trúc Một Chương Trình Java Một chương trình Java cơ bản bao gồm các thành phần chính sau:\nGói (Package):\nMột gói là tập hợp các lớp được tổ chức theo cấu trúc thư mục. Câu lệnh package (nếu có) phải được đặt ở đầu file. // Khai báo gói (tùy chọn) package myfirstprogram; // Import các lớp cần thiết (tùy chọn) import java.util.Scanner; public class HelloWorld { // Phương thức chính public static void main(String[] args) { // In ra màn hình System.out.println(\"Hello, World!\"); // Sử dụng Scanner để nhận đầu vào từ người dùng Scanner scanner = new Scanner(System.in); System.out.print(\"Nhập tên của bạn: \"); String name = scanner.nextLine(); System.out.println(\"Xin chào, \" + name + \"!\"); // Gọi một phương thức khác trong lớp sayGoodbye(); } // Một phương thức bổ sung public static void sayGoodbye() { System.out.println(\"Tạm biệt, hẹn gặp lại!\"); } } Phân Tích Từng Thành Phần\nKhai Báo Lớp: public class HelloWorld định nghĩa một lớp công khai tên là HelloWorld. Phương Thức Chính: public static void main(String[] args) là nơi chương trình bắt đầu chạy. Từ khóa static cho phép phương thức main() chạy mà không cần tạo đối tượng của lớp. In Ra Màn Hình: Sử dụng System.out.println() để in ra kết quả. Sử Dụng Scanner: Scanner là một lớp trong Java cung cấp các phương thức để nhận đầu vào từ người dùng. Phương Thức Bổ Sung: sayGoodbye() là một ví dụ về phương thức khác trong cùng lớp. ","description":"Học cách xây dựng cấu trúc cơ bản của một chương trình Java từ việc khai báo lớp và phương thức.","tags":["java","cấu trúc","chương trình"],"title":"Cấu Trúc Cơ Bản Của Một Chương Trình Java","uri":"/nguyenquangtrai03.github.io/post/2024/baiviet2/"},{"content":"","description":"Chứng chỉ.....","tags":["newsletter"],"title":"Chứng chỉ JavaScript Essentials 1","uri":"/nguyenquangtrai03.github.io/collections/2023/collections/"},{"content":"","description":"Chứng chỉ.....","tags":["newsletter"],"title":"Chứng chỉ JavaScript Essentials 2","uri":"/nguyenquangtrai03.github.io/collections/2023/collections2/"},{"content":"","description":"Chứng chỉ.....","tags":["newsletter"],"title":"Chứng chỉ Networking Basics","uri":"/nguyenquangtrai03.github.io/collections/2023/collections3/"},{"content":"Điều Kiện Trong Java Trong Java, các câu lệnh điều kiện được sử dụng để quyết định thực thi một đoạn mã dựa trên kết quả của một điều kiện logic. Các loại câu lệnh điều kiện chính trong Java bao gồm:\nif statement if-else statement else if ladder switch statement 1. Câu Lệnh if Mô Tả: Câu lệnh if kiểm tra một điều kiện. Nếu điều kiện là true, đoạn mã bên trong sẽ được thực thi.\nCú Pháp: if (điều_kiện) { // Mã thực thi nếu điều kiện đúng } 2. Câu Lệnh if-else Mô Tả: Câu lệnh if-else cung cấp hai lựa chọn: một cho trường hợp điều kiện đúng và một cho trường hợp điều kiện sai.\nCú Pháp: if (điều_kiện) { // Mã thực thi nếu điều kiện đúng } else { // Mã thực thi nếu điều kiện sai } Ví Dụ: int age = 16; if (age \u003e= 18) { System.out.println(\"Bạn đủ tuổi trưởng thành.\"); } else { System.out.println(\"Bạn chưa đủ tuổi trưởng thành.\"); } Kết Quả: Bạn chưa đủ tuổi trưởng thành. 3. Câu Lệnh else if Ladder Mô Tả: Câu lệnh else if cho phép kiểm tra nhiều điều kiện liên tiếp. Nếu một điều kiện đúng, các điều kiện sau đó sẽ bị bỏ qua.\nCú Pháp: if (điều_kiện_1) { // Mã thực thi nếu điều kiện_1 đúng } else if (điều_kiện_2) { // Mã thực thi nếu điều kiện_2 đúng } else { // Mã thực thi nếu không có điều kiện nào đúng } Ví Dụ: int score = 85; if (score \u003e= 90) { System.out.println(\"Xếp loại: Xuất sắc.\"); } else if (score \u003e= 75) { System.out.println(\"Xếp loại: Giỏi.\"); } else if (score \u003e= 50) { System.out.println(\"Xếp loại: Trung bình.\"); } else { System.out.println(\"Xếp loại: Kém.\"); } Kết Quả: Xếp loại: Giỏi. 4. Câu Lệnh switch Mô Tả: Câu lệnh switch được sử dụng để thay thế chuỗi các câu lệnh if-else if khi bạn cần kiểm tra một biến với nhiều giá trị cố định.\nCú Pháp: switch (biểu_thức) { case giá_trị_1: // Mã thực thi break; case giá_trị_2: // Mã thực thi break; default: // Mã thực thi nếu không có giá trị nào khớp break; } Ví Dụ: int day = 3; switch (day) { case 1: System.out.println(\"Thứ Hai\"); break; case 2: System.out.println(\"Thứ Ba\"); break; case 3: System.out.println(\"Thứ Tư\"); break; case 4: System.out.println(\"Thứ Năm\"); break; case 5: System.out.println(\"Thứ Sáu\"); break; default: System.out.println(\"Cuối tuần\"); break; } Kết Quả: Thứ Tư ","description":"Khám phá cách sử dụng các câu lệnh điều kiện như if, else if, và switch trong Java.","tags":["java","điều kiện"],"title":"Điều Kiện Trong Java","uri":"/nguyenquangtrai03.github.io/post/2024/baiviet5/"},{"content":"Viết nhật ký không chỉ là một việc nhỏ bạn làm để giết thời gian, để ghi lại những kỷ niệm của mình - mặc dù có thể là như vậy - mà đó là một chiến lược đã giúp những người thông minh, quyền lực và khôn ngoan trở nên giỏi hơn trong những gì họ làm.\n","title":"Ghi chú 1","uri":"/nguyenquangtrai03.github.io/notes/2024/note1/"},{"content":"Viết nhật ký không chỉ là một việc nhỏ bạn làm để giết thời gian, để ghi lại những kỷ niệm của mình—mặc dù có thể là như vậy—mà đó là một chiến lược đã giúp những người thông minh, quyền lực và khôn ngoan trở nên giỏi hơn trong những gì họ làm.\n","title":"Ghi chú 2","uri":"/nguyenquangtrai03.github.io/notes/2024/note2/"},{"content":"Viết nhật ký không chỉ là một việc nhỏ bạn làm để giết thời gian, để ghi lại những kỷ niệm của mình—mặc dù có thể là như vậy—mà đó là một chiến lược giúp những người thông minh, quyền lực và khôn ngoan trở nên giỏi hơn trong những gì họ làm.\n","title":"Ghi chú 3","uri":"/nguyenquangtrai03.github.io/notes/2024/note3/"},{"content":"Giới Thiệu Về Java Java là một ngôn ngữ lập trình mạnh mẽ và được sử dụng rộng rãi trên toàn cầu. Được phát triển bởi Sun Microsystems (nay là Oracle), Java được sử dụng trong nhiều lĩnh vực, từ ứng dụng di động đến phần mềm doanh nghiệp.\nJava có đặc điểm nổi bật là “viết một lần, chạy mọi nơi” (write once, run anywhere), nghĩa là chương trình Java có thể chạy trên bất kỳ nền tảng nào hỗ trợ JVM (Java Virtual Machine). Điều này giúp Java trở thành một lựa chọn lý tưởng cho phát triển ứng dụng đa nền tảng.\nGiới thiệu về Java\rJava là một ngôn ngữ lập trình phổ biến được sử dụng trong phát triển phần mềm, từ ứng dụng web đến di động.\rTính Năng Nổi Bật Của Java Java có một số tính năng quan trọng làm cho nó trở thành một lựa chọn tuyệt vời cho lập trình viên, bao gồm:\nĐộc lập nền tảng: Java có thể chạy trên mọi hệ điều hành, miễn là có JVM. Bảo mật: Java cung cấp các cơ chế bảo mật mạnh mẽ. Đối tượng hóa: Java là ngôn ngữ lập trình hướng đối tượng, giúp mã nguồn dễ duy trì và mở rộng. Những tính năng nổi bật của Java\rJava là ngôn ngữ lập trình hướng đối tượng, giúp dễ dàng quản lý và phát triển các ứng dụng phức tạp. Cùng với các tính năng bảo mật và khả năng chạy trên nhiều nền tảng, Java luôn là lựa chọn hàng đầu cho các ứng dụng lớn.\rCác Ứng Dụng Của Java Java được sử dụng trong nhiều loại ứng dụng, bao gồm:\nỨng dụng di động: Java là ngôn ngữ chính trong phát triển ứng dụng Android. Ứng dụng web: Với các framework như Spring, Java được sử dụng để phát triển các ứng dụng web quy mô lớn. Ứng dụng doanh nghiệp: Java rất phổ biến trong phát triển các hệ thống quản lý doanh nghiệp, như ERP và CRM. Spring Framework\rSpring Framework giúp phát triển các ứng dụng Java hiệu quả, dễ dàng quản lý và mở rộng.\nAndroid Development\rJava là ngôn ngữ chủ yếu để phát triển ứng dụng Android.\nKết Luận Java vẫn là một ngôn ngữ lập trình quan trọng và có tầm ảnh hưởng lớn trong ngành công nghệ phần mềm. Nếu bạn là một lập trình viên mới bắt đầu, học Java sẽ giúp bạn mở rộng khả năng phát triển ứng dụng đa nền tảng và cung cấp nhiều cơ hội nghề nghiệp trong tương lai.\nĐể tìm hiểu thêm về các chủ đề liên quan đến Java, hãy tham khảo các tài nguyên sau:\nSpring Framework Documentation\nAndroid Developer Documentation\n","description":"Java là một trong những ngôn ngữ lập trình phổ biến và mạnh mẽ. Bài viết này sẽ giới thiệu về Java và những ứng dụng phổ biến của nó.","tags":["java","lập trình","ngôn ngữ"],"title":"Giới Thiệu Ngôn Ngữ Lập Trình Java","uri":"/nguyenquangtrai03.github.io/post/2024/baiviet1/"},{"content":"Kế Thừa Trong Java Kế thừa là một trong những tính năng cốt lõi của lập trình hướng đối tượng (OOP), cho phép một lớp kế thừa các thuộc tính và phương thức từ một lớp khác. Điều này giúp giảm thiểu việc viết lại mã và tăng khả năng tái sử dụng.\n1. Lớp Cha và Lớp Con Lớp cha (superclass): Là lớp được kế thừa. Lớp con (subclass): Là lớp kế thừa từ lớp cha và có thể mở rộng hoặc ghi đè các phương thức của lớp cha. Cú Pháp Kế Thừa: class Subclass extends Superclass { // Các thuộc tính và phương thức của lớp con } 2. Ví Dụ Cơ Bản Lớp Cha: public class Animal { public void makeSound() { System.out.println(\"Some sound\"); } } Lớp Con Kế Thừa: public class Dog extends Animal { @Override public void makeSound() { System.out.println(\"Bark\"); } } Sử Dụng Lớp Kế Thừa: public class Main { public static void main(String[] args) { Animal animal = new Animal(); animal.makeSound(); // Output: Some sound Dog dog = new Dog(); dog.makeSound(); // Output: Bark } } 3. Từ Khóa super Từ khóa super được sử dụng để gọi phương thức hoặc truy cập thuộc tính của lớp cha từ lớp con.\nVí Dụ super: public class Animal { public void makeSound() { System.out.println(\"Some sound\"); } } public class Dog extends Animal { @Override public void makeSound() { super.makeSound(); // Gọi phương thức của lớp cha System.out.println(\"Bark\"); } } Kết Quả: Some sound Bark 4. Kế Thừa Nhiều Cấp Kế thừa nhiều cấp xảy ra khi một lớp kế thừa từ một lớp con khác.\nVí Dụ Kế Thừa Nhiều Cấp: public class Animal { public void eat() { System.out.println(\"This animal eats food.\"); } } public class Mammal extends Animal { public void walk() { System.out.println(\"This mammal walks.\"); } } public class Dog extends Mammal { public void bark() { System.out.println(\"This dog barks.\"); } } Sử Dụng: public class Main { public static void main(String[] args) { Dog dog = new Dog(); dog.eat(); // Từ lớp Animal dog.walk(); // Từ lớp Mammal dog.bark(); // Từ lớp Dog } } Kết Quả: This animal eats food. This mammal walks. This dog barks. ","description":"Khám phá tính năng kế thừa trong Java và cách sử dụng để tái sử dụng mã.","tags":["java","kế thừa"],"title":"Kế Thừa Trong Java","uri":"/nguyenquangtrai03.github.io/post/2024/baiviet8/"},{"content":"Lớp và Đối Tượng Trong Java Java là ngôn ngữ lập trình hướng đối tượng (OOP), trong đó mọi thứ đều xoay quanh lớp và đối tượng. Đây là hai khái niệm cơ bản và quan trọng nhất trong Java.\n1. Lớp Là Gì? Lớp (class) là một bản thiết kế hoặc khuôn mẫu để tạo ra các đối tượng. Nó định nghĩa dữ liệu (thuộc tính) và hành vi (phương thức) mà các đối tượng của lớp đó có thể có.\nCấu Trúc Lớp: class ClassName { // Thuộc tính (Attributes/Fields) dataType attributeName; // Phương thức (Methods) returnType methodName(parameters) { // Khối mã } } Ví Dụ Về Lớp: public class Person { String name; // Thuộc tính int age; // Phương thức public void greet() { System.out.println(\"Hello, my name is \" + name + \" and I am \" + age + \" years old.\"); } } 2. Đối Tượng Là Gì? Đối tượng (object) là một thực thể cụ thể của một lớp. Nó được tạo từ lớp và có thể sử dụng các thuộc tính và phương thức được định nghĩa trong lớp.\nTạo Đối Tượng: Để tạo đối tượng, sử dụng từ khóa new:\nClassName objectName = new ClassName(); Ví Dụ Tạo Đối Tượng: public class Main { public static void main(String[] args) { Person person1 = new Person(); // Tạo đối tượng person1.name = \"Alice\"; // Gán giá trị thuộc tính person1.age = 25; person1.greet(); // Gọi phương thức } } Kết quả: Hello, my name is Alice and I am 25 years old. 3. Thuộc Tính (Attributes) Thuộc tính là các biến được định nghĩa trong một lớp. Chúng đại diện cho trạng thái hoặc đặc điểm của một đối tượng.\nVí Dụ Về Thuộc Tính: public class Car { String brand; String model; int year; } Sử Dụng Thuộc Tính: Car car1 = new Car(); car1.brand = \"Toyota\"; car1.model = \"Corolla\"; car1.year = 2020; System.out.println(car1.brand + \" \" + car1.model + \" (\" + car1.year + \")\"); Kết Quả: Toyota Corolla (2020) 4. Phương Thức (Methods) Phương thức là các hàm được định nghĩa trong một lớp để thực hiện hành động nào đó.\nVí Dụ Về Phương Thức: public class Calculator { public int add(int a, int b) { return a + b; } public int subtract(int a, int b) { return a - b; } } Sử Dụng Phương Thức: Calculator calc = new Calculator(); System.out.println(\"Sum: \" + calc.add(5, 3)); System.out.println(\"Difference: \" + calc.subtract(10, 4)); Kết Quả: Sum: 8 Difference: 6 ","description":"Tìm hiểu về lớp và đối tượng trong Java - nền tảng của lập trình hướng đối tượng.","tags":["java","lớp","đối tượng"],"title":"Lớp và Đối Tượng Trong Java","uri":"/nguyenquangtrai03.github.io/post/2024/baiviet7/"},{"content":"Phương Thức Trong Java Phương thức trong Java là các khối mã được định nghĩa để thực hiện một chức năng cụ thể. Chúng giúp tổ chức mã nguồn tốt hơn, tái sử dụng, và giảm sự lặp lại. Một phương thức có thể nhận tham số và có thể trả về giá trị.\n1. Cấu Trúc Phương Thức Cú Pháp: \u003cmodifier\u003e \u003creturn_type\u003e \u003cmethod_name\u003e(\u003cparameter_list\u003e) { // Khối mã của phương thức return \u003cvalue\u003e; // (Nếu có giá trị trả về) } Giải Thích: modifier: Xác định phạm vi truy cập, ví dụ: public, private, protected. return_type: Kiểu dữ liệu của giá trị trả về. Nếu không trả về giá trị, sử dụng void. method_name: Tên phương thức (tuân theo quy tắc đặt tên biến). parameter_list: Danh sách tham số (nếu có), gồm kiểu dữ liệu và tên biến. Ví Dụ: public static int add(int a, int b) { return a + b; } 2. Gọi Phương Thức Để sử dụng một phương thức, bạn cần gọi nó trong mã của mình.\nVí Dụ: public class Calculator { public static int add(int a, int b) { return a + b; } public static void main(String[] args) { int result = add(5, 10); System.out.println(\"Tổng là: \" + result); } } Kết Quả: Tổng là: 15 3. Phương Thức Không Trả Về Giá Trị (void) Phương thức kiểu void không trả về giá trị. Chúng thường được sử dụng để thực hiện các tác vụ.\nVí Dụ: public static void greet(String name) { System.out.println(\"Xin chào, \" + name + \"!\"); } public static void main(String[] args) { greet(\"Nam\"); } Kết Quả: Xin chào, Nam! 4. Phương Thức Với Tham Số Phương thức có thể nhận tham số đầu vào để xử lý dữ liệu.\nVí Dụ: public static int multiply(int a, int b) { return a * b; } public static void main(String[] args) { int result = multiply(4, 5); System.out.println(\"Kết quả nhân là: \" + result); } Kết Quả: Kết quả nhân là: 20 ","description":"Khám phá cách khai báo và sử dụng phương thức trong Java.","tags":["java","phương thức"],"title":"Phương Thức Trong Java","uri":"/nguyenquangtrai03.github.io/post/2024/baiviet6/"},{"content":"Xử Lý Ngoại Lệ Trong Java Ngoại lệ (Exception) là các tình huống lỗi xảy ra trong quá trình thực thi chương trình. Java cung cấp cơ chế xử lý ngoại lệ để kiểm soát các lỗi và ngăn chặn ứng dụng bị dừng đột ngột.\n1. Cơ Bản Về Ngoại Lệ Một ngoại lệ xảy ra khi một sự kiện bất thường làm gián đoạn luồng thực thi bình thường của chương trình. Ví dụ: chia một số cho 0 hoặc cố gắng truy cập một chỉ mục không tồn tại trong mảng.\nVí Dụ Ngoại Lệ: int result = 10 / 0; // ArithmeticException: / by zero 2. Xử Lý Ngoại Lệ Sử Dụng try-catch Câu lệnh try chứa mã có khả năng gây ra ngoại lệ. Nếu ngoại lệ xảy ra, khối catch sẽ xử lý nó.\nCú Pháp try-catch: try { // Mã có thể gây ra ngoại lệ } catch (ExceptionType e) { // Xử lý ngoại lệ } Ví Dụ: try { int result = 10 / 0; } catch (ArithmeticException e) { System.out.println(\"Error: \" + e.getMessage()); } Kết Quả: Error: / by zero 3. Từ Khóa finally Khối finally luôn được thực thi, bất kể ngoại lệ có xảy ra hay không. Thường được sử dụng để dọn dẹp tài nguyên như đóng tệp hoặc kết nối cơ sở dữ liệu.\nVí Dụ finally: try { int[] numbers = {1, 2, 3}; System.out.println(numbers[5]); } catch (ArrayIndexOutOfBoundsException e) { System.out.println(\"Index out of bounds!\"); } finally { System.out.println(\"Execution completed.\"); } Kết Quả: Index out of bounds! Execution completed. 4. Xử Lý Nhiều Ngoại Lệ Bạn có thể xử lý nhiều loại ngoại lệ bằng cách sử dụng nhiều khối catch.\nVí Dụ Nhiều Ngoại Lệ: try { int result = 10 / 0; int[] numbers = {1, 2, 3}; System.out.println(numbers[5]); } catch (ArithmeticException e) { System.out.println(\"Arithmetic Error: \" + e.getMessage()); } catch (ArrayIndexOutOfBoundsException e) { System.out.println(\"Array Error: \" + e.getMessage()); } Kết Quả: Arithmetic Error: / by zero ","description":"Tìm hiểu cách xử lý ngoại lệ trong Java để ứng dụng của bạn trở nên ổn định và dễ bảo trì.","tags":["java","ngoại lệ"],"title":"Xử Lý Ngoại Lệ Trong Java","uri":"/nguyenquangtrai03.github.io/post/2024/baiviet9/"}]
